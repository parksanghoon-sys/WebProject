@page "/weather"
@using System.Collections
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime _js


<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <div id="chart_div" style="height: 320px;"></div>
}

@code {
    private WeatherForecast[] forecasts;
    private Task<IJSObjectReference> _moduleGraph;
    private Task<IJSObjectReference> ModuleGraph => _moduleGraph ??= _js.InvokeAsync<IJSObjectReference>("import", "./js/graph.js").AsTask();

    protected override async Task OnInitializedAsync()
    {
        Http.BaseAddress = new Uri(NavigationManager.BaseUri);
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/sample-data/weather.json");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var moduleGraph = await ModuleGraph;

        ArrayList points = new ArrayList();
        foreach (var item in forecasts)
        {

            object[] array1 = new object[] { item.Date.ToShortDateString(), item.TemperatureC, item.TemperatureF };
            points.Add(array1);
        }
        await moduleGraph.InvokeVoidAsync("drawGrowthGraph", points);

    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}

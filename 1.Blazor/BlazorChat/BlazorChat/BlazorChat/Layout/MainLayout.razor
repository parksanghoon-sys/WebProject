@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client;
@using BlazorChat.Component;

<audio id="notification" src="/media/notification.mp3" />
<MudThemeProvider></MudThemeProvider>
<MudDialogProvider></MudDialogProvider>
<MudSnackbarProvider></MudSnackbarProvider>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudText Typo="Typo.h6" Class="ml-4">Blazor Chat</MudText>
        <MudSpacer></MudSpacer>
        <LoginDisplay></LoginDisplay>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <NavMenu></NavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudToolBar >
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
        </MudToolBar>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            <CascadingValue Value="_hubConnection">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{
    bool _drawerOpen = false;
    private string CurrentUserId {get; set;}

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private HubConnection _hubConnection;
    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/signalRHub")).Build();

        await _hubConnection.StartAsync();
        _hubConnection.On<string, string, string>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
        {
            if(CurrentUserId == receiverUserId)
            {
                _jsRuntime.InvokeAsync<string>("PlayAudio", "notification");
                _snackBar.Add(message, Severity.Info, configure =>
                {
                    configure.VisibleStateDuration = 100000;
                    configure.HideTransitionDuration = 500;
                    configure.ShowTransitionDuration = 500;
                    configure.Action = "Chat?";
                    configure.ActionColor = Color.Info;
                    configure.Onclick = snackbar =>
                    {
                        _navigationManager.NavigateTo($"chat/{senderUserId}");
                        return Task.CompletedTask;
                    };
                });
            }
        });
        var state = await _stateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        CurrentUserId = user.Claims.Where(a => a.Type == "sub").Select(a => a.Value).FirstOrDefault();
    }
}